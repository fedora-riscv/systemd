From e998c9d7c1a52ab02ff6e9c363c1cfe0b76cd6f4 Mon Sep 17 00:00:00 2001
From: Siddhesh Poyarekar <siddhesh@gotplt.org>
Date: Sat, 7 Jan 2023 19:30:32 -0500
Subject: [PATCH 5/5] alloc-util: Disallow inlining of expand_to_usable

Explicitly set __attribute__ ((noinline)) so that the compiler does not
attempt to inline expand_to_usable, even with LTO.

(cherry picked from commit 4f79f545b3c46c358666c9f5f2b384fe50aac4b4)
---
 src/basic/alloc-util.h              | 7 ++++---
 src/fundamental/macro-fundamental.h | 1 +
 2 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/src/basic/alloc-util.h b/src/basic/alloc-util.h
index eb53aae6f3..bf783b15a2 100644
--- a/src/basic/alloc-util.h
+++ b/src/basic/alloc-util.h
@@ -186,10 +186,11 @@ void* greedy_realloc0(void **p, size_t need, size_t size);
 #endif
 
 /* Dummy allocator to tell the compiler that the new size of p is newsize. The implementation returns the
- * pointer as is; the only reason for its existence is as a conduit for the _alloc_ attribute. This cannot be
- * a static inline because gcc then loses the attributes on the function.
+ * pointer as is; the only reason for its existence is as a conduit for the _alloc_ attribute.  This must not
+ * be inlined (hence a non-static function with _noinline_ because LTO otherwise tries to inline it) because
+ * gcc then loses the attributes on the function.
  * See: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96503 */
-void *expand_to_usable(void *p, size_t newsize) _alloc_(2) _returns_nonnull_;
+void *expand_to_usable(void *p, size_t newsize) _alloc_(2) _returns_nonnull_ _noinline_;
 
 static inline size_t malloc_sizeof_safe(void **xp) {
         if (_unlikely_(!xp || !*xp))
diff --git a/src/fundamental/macro-fundamental.h b/src/fundamental/macro-fundamental.h
index c11a5b15f4..e73174a593 100644
--- a/src/fundamental/macro-fundamental.h
+++ b/src/fundamental/macro-fundamental.h
@@ -20,6 +20,7 @@
 #define _hidden_ __attribute__((__visibility__("hidden")))
 #define _likely_(x) (__builtin_expect(!!(x), 1))
 #define _malloc_ __attribute__((__malloc__))
+#define _noinline_ __attribute__((noinline))
 #define _noreturn_ _Noreturn
 #define _packed_ __attribute__((__packed__))
 #define _printf_(a, b) __attribute__((__format__(printf, a, b)))
-- 
2.39.1

